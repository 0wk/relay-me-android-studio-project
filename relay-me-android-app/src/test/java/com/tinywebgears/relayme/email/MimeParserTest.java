package com.tinywebgears.relayme.email;

import java.io.BufferedInputStream;
import java.io.ByteArrayInputStream;
import java.io.ByteArrayOutputStream;
import java.io.IOException;
import java.io.InputStream;
import java.util.Arrays;
import java.util.List;
import java.util.regex.Pattern;

import org.apache.james.mime4j.MimeException;
import org.apache.james.mime4j.dom.Entity;
import org.apache.james.mime4j.dom.Message;
import org.apache.james.mime4j.dom.MessageBuilder;
import org.apache.james.mime4j.dom.TextBody;
import org.apache.james.mime4j.message.BodyPart;
import org.apache.james.mime4j.message.DefaultMessageBuilder;
import org.apache.james.mime4j.message.MultipartImpl;

import org.junit.Test;
import static junit.framework.Assert.assertTrue;

public class MimeParserTest
{
    // FIXME: Complete
    private static String singlePartMimeString = new String(new byte[] {
            // MIME-Version
            77, 73, 77, 69, 45, 86, 101, 114, 115, 105, 111, 110, 58, 32, 49, 46, 48, 13, 10, 13, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105,
            110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 34, 117, 116, 102, 45, 56, 34, 13, 10,
            // Content-Transfer-Encoding
            67, 111, 110, 116, 101, 110, 116, 45, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105,
            110, 103, 58, 32, 98, 97, 115, 101, 54, 52, 13, 10,
            // Data
            77, 84, 103, 120, 79, 83, 66, 78, 82, 85, 70, 69, 84, 49, 100, 87, 83, 85, 86, 88, 73, 69, 82, 83, 13, 10
    });

    private static String gmailMimeString = new String(new byte[]{
            // MIME-Version
            77, 73, 77, 69, 45, 86, 101, 114, 115, 105, 111, 110, 58, 32, 49, 46, 48, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 109, 117, 108, 116, 105, 112, 97, 114, 116,
            47, 97, 108, 116, 101, 114, 110, 97, 116, 105, 118, 101, 59, 32, 98, 111, 117, 110, 100, 97, 114, 121, 61,
            48, 56, 57, 101, 48, 49, 49, 55, 55, 57, 56, 102, 102, 48, 48, 51, 99, 54, 48, 53, 48, 98, 101, 102, 98, 97,
            97, 101, 10,
            // Header Separator
            10,
            // Boundary
            45, 45, 48, 56, 57, 101, 48, 49, 49, 55, 55, 57, 56, 102, 102, 48, 48, 51, 99, 54, 48, 53, 48, 98, 101, 102,
            98, 97, 97, 101, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105,
            110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 10,
            // Header Separator
            10,
            // Data
            104, 101, 108, 108, 111, 10,
            10,
            45, 45, 10,
            78, 111, 114, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 10,
            10,
            79, 110, 32, 77, 111, 110, 44, 32, 74, 97, 110, 32, 53, 44, 32, 50, 48, 49, 53, 32, 97, 116, 32, 55, 58, 53,
            54, 32, 80, 77, 44, 32, 60, 110, 111, 114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99,
            111, 109, 62, 32, 119, 114, 111, 116, 101, 58, 10,
            10,
            62, 32, 116, 101, 115, 116, 10,
            62, 10,
            62, 32, 45, 45, 10,
            62, 32, 82, 101, 99, 101, 105, 118, 101, 100, 58, 32, 77, 111, 110, 32, 74, 97, 110, 32, 48, 53, 32, 48, 56,
            58, 53, 54, 58, 48, 54, 32, 71, 77, 84, 32, 50, 48, 49, 53, 10,
            10,
            // Boundary
            45, 45, 48, 56, 57, 101, 48, 49, 49, 55, 55, 57, 56, 102, 102, 48, 48, 51, 99, 54, 48, 53, 48, 98, 101, 102,
            98, 97, 97, 101, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 104, 116, 109, 108,
            59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 10,
            // Content-Transfer-Encoding
            67, 111, 110, 116, 101, 110, 116, 45, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105,
            110, 103, 58, 32, 113, 117, 111, 116, 101, 100, 45, 112, 114, 105, 110, 116, 97, 98, 108, 101, 10,
            // Header Separator
            10,
            // Data
            60, 100, 105, 118, 32, 100, 105, 114, 61, 51, 68, 34, 108, 116, 114, 34, 62, 104, 101, 108, 108, 111, 60,
            98, 114, 62, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 103, 109, 97, 105, 108, 95, 101,
            120, 116, 114, 97, 34, 62, 60, 98, 114, 32, 99, 108, 101, 97, 114, 61, 51, 68, 34, 97, 108, 108, 34, 62, 60,
            100, 105, 118, 61, 10,
            62, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 103, 109, 97, 105, 108, 95, 115, 105, 103,
            110, 97, 116, 117, 114, 101, 34, 62, 60, 100, 105, 118, 32, 100, 105, 114, 61, 51, 68, 34, 108, 116, 114,
            34, 62, 60, 100, 105, 118, 62, 60, 102, 111, 110, 116, 32, 102, 97, 99, 101, 61, 51, 68, 34, 97, 114, 105,
            97, 108, 44, 104, 61, 10,
            101, 108, 118, 101, 116, 105, 99, 97, 44, 115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 34, 62, 45, 45,
            60, 98, 114, 62, 60, 47, 102, 111, 110, 116, 62, 60, 47, 100, 105, 118, 62, 60, 100, 105, 118, 62, 60, 102,
            111, 110, 116, 32, 102, 97, 99, 101, 61, 51, 68, 34, 97, 114, 105, 97, 108, 44, 104, 101, 108, 118, 101,
            116, 105, 99, 97, 44, 61, 10,
            115, 97, 110, 115, 45, 115, 101, 114, 105, 102, 34, 62, 78, 111, 114, 109, 97, 110, 32, 65, 116, 97, 115,
            104, 98, 97, 114, 60, 98, 114, 62, 60, 47, 102, 111, 110, 116, 62, 60, 47, 100, 105, 118, 62, 60, 98, 114,
            62, 60, 47, 100, 105, 118, 62, 60, 47, 100, 105, 118, 62, 60, 47, 100, 105, 118, 62, 60, 100, 105, 118, 32,
            99, 108, 97, 115, 61, 10,
            115, 61, 51, 68, 34, 103, 109, 97, 105, 108, 95, 113, 117, 111, 116, 101, 34, 62, 79, 110, 32, 77, 111,
            110, 44, 32, 74, 97, 110, 32, 53, 44, 32, 50, 48, 49, 53, 32, 97, 116, 32, 55, 58, 53, 54, 32, 80, 77, 44,
            32, 32, 60, 115, 112, 97, 110, 32, 100, 105, 114, 61, 51, 68, 34, 108, 116, 114, 34, 62, 38, 108, 116, 59,
            60, 97, 61, 10,
            32, 104, 114, 101, 102, 61, 51, 68, 34, 109, 97, 105, 108, 116, 111, 58, 110, 111, 114, 109, 97, 110, 64,
            97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 34, 32, 116, 97, 114, 103, 101, 116, 61, 51, 68, 34,
            95, 98, 108, 97, 110, 107, 34, 62, 110, 111, 114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46,
            99, 111, 109, 60, 61, 10,
            47, 97, 62, 38, 103, 116, 59, 60, 47, 115, 112, 97, 110, 62, 32, 119, 114, 111, 116, 101, 58, 60, 98, 114,
            62, 60, 98, 108, 111, 99, 107, 113, 117, 111, 116, 101, 32, 99, 108, 97, 115, 115, 61, 51, 68, 34, 103, 109,
            97, 105, 108, 95, 113, 117, 111, 116, 101, 34, 32, 115, 116, 121, 108, 101, 61, 51, 68, 34, 109, 97, 114,
            103, 105, 110, 58, 61, 10,
            48, 32, 48, 32, 48, 32, 46, 56, 101, 120, 59, 98, 111, 114, 100, 101, 114, 45, 108, 101, 102, 116, 58, 49,
            112, 120, 32, 35, 99, 99, 99, 32, 115, 111, 108, 105, 100, 59, 112, 97, 100, 100, 105, 110, 103, 45, 108,
            101, 102, 116, 58, 49, 101, 120, 34, 62, 116, 101, 115, 116, 60, 98, 114, 62, 10,
            60, 98, 114, 62, 10,
            45, 45, 60, 98, 114, 62, 10,
            82, 101, 99, 101, 105, 118, 101, 100, 58, 32, 77, 111, 110, 32, 74, 97, 110, 32, 48, 53, 32, 48, 56, 58, 53,
            54, 58, 48, 54, 32, 71, 77, 84, 32, 50, 48, 49, 53, 60, 47, 98, 108, 111, 99, 107, 113, 117, 111, 116, 101,
            62, 60, 47, 100, 105, 118, 62, 60, 98, 114, 62, 60, 47, 100, 105, 118, 62, 60, 47, 100, 105, 118, 62, 10, 10
    });

    private static String yahooMimeString = new String(new byte[]{
            // MIME-Version
            77, 73, 77, 69, 45, 86, 101, 114, 115, 105, 111, 110, 58, 32, 49, 46, 48, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 109, 117, 108, 116, 105, 112, 97, 114, 116,
            47, 97, 108, 116, 101, 114, 110, 97, 116, 105, 118, 101, 59, 98, 111, 117, 110, 100, 97, 114, 121, 61, 34,
            45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 50, 57, 55, 51, 52, 55, 55, 95, 49, 57, 56, 52, 51, 50, 55,
            50, 49, 52, 46, 49, 52, 50, 48, 53, 48, 51, 50, 50, 53, 51, 50, 53, 34, 10,
            // Header Separator
            10,
            // Boundary
            45, 45, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 50, 57, 55, 51, 52, 55, 55, 95, 49, 57, 56, 52, 51,
            50, 55, 50, 49, 52, 46, 49, 52, 50, 48, 53, 48, 51, 50, 50, 53, 51, 50, 53, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 112, 108, 97, 105,
            110, 59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 10,
            // Content-Transfer-Encoding
            67, 111, 110, 116, 101, 110, 116, 45, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105,
            110, 103, 58, 32, 113, 117, 111, 116, 101, 100, 45, 112, 114, 105, 110, 116, 97, 98, 108, 101, 10,
            // Header Separator
            10,
            // Data
            82, 69, 80, 76, 89, 46, 46, 46, 61, 67, 50, 61, 65, 48, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
            95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
            95, 95, 95, 10,
            32, 72, 111, 117, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 10,
            95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
            95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 61, 50, 48, 10,
            10,
            32, 32, 32, 32, 32, 79, 110, 32, 84, 117, 101, 115, 100, 97, 121, 44, 32, 54, 32, 74, 97, 110, 117, 97, 114,
            121, 32, 50, 48, 49, 53, 44, 32, 49, 49, 58, 49, 48, 44, 32, 34, 110, 111, 114, 109, 97, 110, 64, 97, 116,
            97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 34, 32, 60, 110, 111, 114, 109, 97, 110, 64, 97, 116, 97, 115,
            104, 61, 10,
            98, 97, 114, 46, 99, 111, 109, 62, 32, 119, 114, 111, 116, 101, 58, 10,
            32, 32, 61, 50, 48, 10,
            10,
            32, 84, 69, 83, 84, 10,
            10,
            45, 45, 10,
            82, 101, 99, 101, 105, 118, 101, 100, 58, 32, 84, 117, 101, 32, 74, 97, 110, 32, 48, 54, 32, 48, 48, 58, 49,
            48, 58, 52, 53, 32, 71, 77, 84, 32, 50, 48, 49, 53, 10,
            10,
            32, 32, 32, 10,
            // Boundary
            45, 45, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 50, 57, 55, 51, 52, 55, 55, 95, 49, 57, 56, 52, 51,
            50, 55, 50, 49, 52, 46, 49, 52, 50, 48, 53, 48, 51, 50, 50, 53, 51, 50, 53, 10,
            // Content-Type
            67, 111, 110, 116, 101, 110, 116, 45, 84, 121, 112, 101, 58, 32, 116, 101, 120, 116, 47, 104, 116, 109, 108,
            59, 32, 99, 104, 97, 114, 115, 101, 116, 61, 85, 84, 70, 45, 56, 10,
            // Content-Transfer-Encoding
            67, 111, 110, 116, 101, 110, 116, 45, 84, 114, 97, 110, 115, 102, 101, 114, 45, 69, 110, 99, 111, 100, 105,
            110, 103, 58, 32, 55, 98, 105, 116, 10,
            // Header Separator
            10,
            // Data
            60, 104, 116, 109, 108, 62, 60, 98, 111, 100, 121, 62, 60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61,
            34, 99, 111, 108, 111, 114, 58, 35, 48, 48, 48, 59, 32, 98, 97, 99, 107, 103, 114, 111, 117, 110, 100, 45,
            99, 111, 108, 111, 114, 58, 35, 102, 102, 102, 59, 32, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121,
            58, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 44, 32, 72, 101, 108, 118, 101, 116, 105,
            99, 97, 32, 78, 101, 117, 101, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97,
            108, 44, 32, 76, 117, 99, 105, 100, 97, 32, 71, 114, 97, 110, 100, 101, 44, 32, 83, 97, 110, 115, 45, 83,
            101, 114, 105, 102, 59, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 49, 50, 112, 120, 34, 62, 82, 69,
            80, 76, 89, 46, 46, 46, 60, 100, 105, 118, 62, 60, 115, 112, 97, 110, 62, 60, 47, 115, 112, 97, 110, 62, 60,
            47, 100, 105, 118, 62, 60, 100, 105, 118, 62, 38, 110, 98, 115, 112, 59, 60, 47, 100, 105, 118, 62, 60, 100,
            105, 118, 62, 60, 100, 105, 118, 62, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
            95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60, 98,
            114, 62, 32, 72, 111, 117, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 60, 98, 114, 62, 95, 95,
            95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
            95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 60, 47, 100, 105, 118, 62, 60, 47, 100, 105, 118,
            62, 32, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 34, 113, 116, 100, 83, 101, 112, 97, 114, 97, 116,
            101, 66, 82, 34, 62, 60, 98, 114, 62, 60, 98, 114, 62, 60, 47, 100, 105, 118, 62, 60, 100, 105, 118, 32,
            115, 116, 121, 108, 101, 61, 34, 100, 105, 115, 112, 108, 97, 121, 58, 32, 98, 108, 111, 99, 107, 59, 34,
            32, 99, 108, 97, 115, 115, 61, 34, 121, 97, 104, 111, 111, 95, 113, 117, 111, 116, 101, 100, 34, 62, 32, 60,
            100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 102, 97, 109, 105, 108, 121, 58,
            32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 44, 32, 72, 101, 108, 118, 101, 116, 105,
            99, 97, 32, 78, 101, 117, 101, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65, 114, 105, 97,
            108, 44, 32, 76, 117, 99, 105, 100, 97, 32, 71, 114, 97, 110, 100, 101, 44, 32, 83, 97, 110, 115, 45, 83,
            101, 114, 105, 102, 59, 32, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 50, 112, 120, 59, 34,
            62, 32, 60, 100, 105, 118, 32, 115, 116, 121, 108, 101, 61, 34, 102, 111, 110, 116, 45, 102, 97, 109, 105,
            108, 121, 58, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 78, 101, 117, 101, 44, 32, 72, 101, 108, 118,
            101, 116, 105, 99, 97, 32, 78, 101, 117, 101, 44, 32, 72, 101, 108, 118, 101, 116, 105, 99, 97, 44, 32, 65,
            114, 105, 97, 108, 44, 32, 76, 117, 99, 105, 100, 97, 32, 71, 114, 97, 110, 100, 101, 44, 32, 83, 97, 110,
            115, 45, 83, 101, 114, 105, 102, 59, 32, 102, 111, 110, 116, 45, 115, 105, 122, 101, 58, 32, 49, 50, 112,
            120, 59, 34, 62, 32, 60, 100, 105, 118, 32, 100, 105, 114, 61, 34, 108, 116, 114, 34, 62, 32, 60, 102, 111,
            110, 116, 32, 102, 97, 99, 101, 61, 34, 65, 114, 105, 97, 108, 34, 32, 115, 105, 122, 101, 61, 34, 50, 34,
            62, 32, 79, 110, 32, 84, 117, 101, 115, 100, 97, 121, 44, 32, 54, 32, 74, 97, 110, 117, 97, 114, 121, 32,
            50, 48, 49, 53, 44, 32, 49, 49, 58, 49, 48, 44, 32, 34, 110, 111, 114, 109, 97, 110, 64, 97, 116, 97, 115,
            104, 98, 97, 114, 46, 99, 111, 109, 34, 32, 38, 108, 116, 59, 110, 111, 114, 109, 97, 110, 64, 97, 116, 97,
            115, 104, 98, 97, 114, 46, 99, 111, 109, 38, 103, 116, 59, 32, 119, 114, 111, 116, 101, 58, 60, 98, 114, 62,
            32, 60, 47, 102, 111, 110, 116, 62, 32, 60, 47, 100, 105, 118, 62, 32, 32, 60, 98, 114, 62, 60, 98, 114, 62,
            32, 60, 100, 105, 118, 32, 99, 108, 97, 115, 115, 61, 34, 121, 95, 109, 115, 103, 95, 99, 111, 110, 116, 97,
            105, 110, 101, 114, 34, 62, 84, 69, 83, 84, 60, 98, 114, 62, 60, 98, 114, 62, 45, 45, 60, 98, 114, 62, 82,
            101, 99, 101, 105, 118, 101, 100, 58, 32, 84, 117, 101, 32, 74, 97, 110, 32, 48, 54, 32, 48, 48, 58, 49, 48,
            58, 52, 53, 32, 71, 77, 84, 32, 50, 48, 49, 53, 60, 98, 114, 62, 60, 98, 114, 62, 60, 47, 100, 105, 118, 62,
            32, 32, 60, 47, 100, 105, 118, 62, 32, 60, 47, 100, 105, 118, 62, 32, 32, 60, 47, 100, 105, 118, 62, 32, 60,
            47, 100, 105, 118, 62, 60, 47, 98, 111, 100, 121, 62, 60, 47, 104, 116, 109, 108, 62, 10,
            // Boundary
            45, 45, 45, 45, 45, 45, 61, 95, 80, 97, 114, 116, 95, 50, 57, 55, 51, 52, 55, 55, 95, 49, 57, 56, 52, 51,
            50, 55, 50, 49, 52, 46, 49, 52, 50, 48, 53, 48, 51, 50, 50, 53, 51, 50, 53, 45, 45, 10
    });

    private static List<String> inputStrings = Arrays.asList(

            new String(new byte[]{72, 79, 76, 65, 13, 10, 13, 10, 45, 45, 13, 10, 78, 111, 114, 109, 97, 110, 32, 65,
                    116, 97, 115, 104, 98, 97, 114, 13, 10, 77, 111, 98, 105, 108, 101, 58, 32, 43, 54, 49, 45, 52, 51,
                    49, 45, 52, 49, 54, 49, 50, 55, 13, 10, 87, 101, 98, 58, 32, 104, 116, 116, 112, 58, 47, 47, 110,
                    111, 114, 109, 97, 110, 46, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 47, 13, 10, 13,
                    10, 50, 48, 49, 53, 45, 48, 49, 45, 48, 57, 32, 49, 54, 58, 48, 49, 32, 71, 77, 84, 43, 49, 49, 58,
                    48, 48, 32, 78, 111, 114, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 32, 60, 110, 111,
                    114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 58, 13, 10, 13, 10,
                    62, 32, -40, -86, -40, -77, -40, -86, 32, -39, -123, -37, -116, 32, -38, -87, -39, -122, -37, -116,
                    -39, -123, 13, 10, 62, 32, -37, -116, -38, -87, 32, -40, -81, -39, -120, 32, -40, -77, -39, -121,
                    13, 10, 62, 13, 10}),

            new String(new byte[]{72, 79, 76, 65, 13, 10, 13, 10, 45, 45, 13, 10, 78, 111, 114, 109, 97, 110, 32, 65,
                    116, 97, 115, 104, 98, 97, 114, 13, 10, 77, 111, 98, 105, 108, 101, 58, 32, 43, 54, 49, 45, 52, 51,
                    49, 45, 52, 49, 54, 49, 50, 55, 13, 10, 87, 101, 98, 58, 32, 104, 116, 116, 112, 58, 47, 47, 110,
                    111, 114, 109, 97, 110, 46, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 47, 13, 10, 13,
                    10, 50, 48, 49, 53, 45, 48, 49, 45, 48, 57, 32, 49, 54, 58, 48, 49, 32, 71, 77, 84, 43, 49, 49, 58,
                    48, 48, 13, 10, 78, 111, 114, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 32, 60, 110,
                    111, 114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 58, 13, 10,
                    13, 10, 62, 32, -40, -86, -40, -77, -40, -86, 32, -39, -123, -37, -116, 32, -38, -87, -39, -122,
                    -37, -116, -39, -123, 13, 10, 62, 32, -37, -116, -38, -87, 32, -40, -81, -39, -120, 32, -40, -77,
                    -39, -121, 13, 10, 62, 13, 10}),

            new String(new byte[]{72, 79, 76, 65, 13, 10, 13, 10, 45, 45, 13, 10, 78, 111, 114, 109, 97, 110, 32, 65,
                    116, 97, 115, 104, 98, 97, 114, 13, 10, 77, 111, 98, 105, 108, 101, 58, 32, 43, 54, 49, 45, 52, 51,
                    49, 45, 52, 49, 54, 49, 50, 55, 13, 10, 87, 101, 98, 58, 32, 104, 116, 116, 112, 58, 47, 47, 110,
                    111, 114, 109, 97, 110, 46, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 47, 13, 10, 13,
                    10, 50, 48, 49, 53, 45, 48, 49, 45, 48, 57, 32, 56, 58, 48, 49, 32, 71, 77, 84, 43, 49, 49, 58, 48,
                    48, 32, 78, 111, 114, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 32, 60, 110, 111, 114,
                    109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 58, 13, 10, 13, 10, 62,
                    32, -40, -86, -40, -77, -40, -86, 32, -39, -123, -37, -116, 32, -38, -87, -39, -122, -37, -116, -39,
                    -123, 13, 10, 62, 32, -37, -116, -38, -87, 32, -40, -81, -39, -120, 32, -40, -77, -39, -121, 13, 10,
                    62, 13, 10}),

            new String(new byte[]{72, 79, 76, 65, 13, 10, 13, 10, 45, 45, 13, 10, 78, 111, 114, 109, 97, 110, 32, 65,
                    116, 97, 115, 104, 98, 97, 114, 13, 10, 77, 111, 98, 105, 108, 101, 58, 32, 43, 54, 49, 45, 52, 51,
                    49, 45, 52, 49, 54, 49, 50, 55, 13, 10, 87, 101, 98, 58, 32, 104, 116, 116, 112, 58, 47, 47, 110,
                    111, 114, 109, 97, 110, 46, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 47, 13, 10, 13,
                    10, 50, 48, 49, 53, 45, 48, 49, 45, 48, 57, 32, 56, 58, 48, 49, 32, 71, 77, 84, 43, 49, 49, 58, 48,
                    48, 13, 10, 78, 111, 114, 109, 97, 110, 32, 65, 116, 97, 115, 104, 98, 97, 114, 32, 60, 110, 111,
                    114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 58, 13, 10, 13, 10,
                    62, 32, -40, -86, -40, -77, -40, -86, 32, -39, -123, -37, -116, 32, -38, -87, -39, -122, -37, -116,
                    -39, -123, 13, 10, 62, 32, -37, -116, -38, -87, 32, -40, -81, -39, -120, 32, -40, -77, -39, -121,
                    13, 10, 62, 13, 10}),

            new String(new byte[]{104, 101, 108, 108, 111, 10, 10, 45, 45, 10, 78, 111, 114, 109, 97, 110, 32, 65,
                    116, 97, 115, 104, 98, 97, 114, 10, 10, 79, 110, 32, 77, 111, 110, 44, 32, 74, 97, 110, 32, 53, 44,
                    32, 50, 48, 49, 53, 32, 97, 116, 32, 55, 58, 53, 54, 32, 80, 77, 44, 32, 60, 110, 111, 114, 109, 97,
                    110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 32, 119, 114, 111, 116, 101, 58,
                    10, 10, 62, 32, 116, 101, 115, 116, 10, 62, 10, 62, 32, 45, 45, 10, 62, 32, 82, 101, 99, 101, 105,
                    118, 101, 100, 58, 32, 77, 111, 110, 32, 74, 97, 110, 32, 48, 53, 32, 48, 56, 58, 53, 54, 58, 48,
                    54, 32, 71, 77, 84, 32, 50, 48, 49, 53, 10}),

            new String(new byte[]{104, 101, 108, 108, 111, 10, 10, 45, 45, 10, 78, 111, 114, 109, 97, 110, 32, 65,
                    116, 97, 115, 104, 98, 97, 114, 10, 10, 79, 110, 32, 77, 111, 110, 44, 32, 74, 97, 110, 32, 53, 44,
                    32, 50, 48, 49, 53, 32, 97, 116, 32, 55, 58, 53, 54, 32, 80, 77, 44, 32, 60, 110, 111, 114, 109, 97,
                    110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 10, 119, 114, 111, 116, 101, 58,
                    10, 10, 62, 32, 116, 101, 115, 116, 10, 62, 10, 62, 32, 45, 45, 10, 62, 32, 82, 101, 99, 101, 105,
                    118, 101, 100, 58, 32, 77, 111, 110, 32, 74, 97, 110, 32, 48, 53, 32, 48, 56, 58, 53, 54, 58, 48,
                    54, 32, 71, 77, 84, 32, 50, 48, 49, 53, 10}),

            new String(new byte[]{82, 69, 80, 76, 89, 46, 46, 46, -62, -96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
                    95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
                    95, 95, 95, 95, 95, 95, 95, 95, 13, 10, 32, 72, 111, 117, 109, 97, 110, 32, 65, 116, 97, 115, 104,
                    98, 97, 114, 13, 10, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
                    95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 32, 13,
                    10, 13, 10, 32, 32, 32, 32, 32, 79, 110, 32, 84, 117, 101, 115, 100, 97, 121, 44, 32, 54, 32, 74,
                    97, 110, 117, 97, 114, 121, 32, 50, 48, 49, 53, 44, 32, 49, 49, 58, 49, 48, 44, 32, 34, 110, 111,
                    114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 34, 32, 60, 110, 111,
                    114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 32, 119, 114, 111,
                    116, 101, 58, 13, 10, 32, 32, 32, 13, 10, 13, 10, 32, 84, 69, 83, 84, 13, 10, 13, 10, 45, 45, 13,
                    10, 82, 101, 99, 101, 105, 118, 101, 100, 58, 32, 84, 117, 101, 32, 74, 97, 110, 32, 48, 54, 32, 48,
                    48, 58, 49, 48, 58, 52, 53, 32, 71, 77, 84, 32, 50, 48, 49, 53, 13, 10, 13, 10}),

            new String(new byte[]{82, 69, 80, 76, 89, 46, 46, 46, -62, -96, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
                    95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
                    95, 95, 95, 95, 95, 95, 95, 95, 13, 10, 32, 72, 111, 117, 109, 97, 110, 32, 65, 116, 97, 115, 104,
                    98, 97, 114, 13, 10, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95,
                    95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 95, 32, 13,
                    10, 13, 10, 32, 32, 32, 32, 32, 79, 110, 32, 84, 117, 101, 115, 100, 97, 121, 44, 32, 54, 32, 74,
                    97, 110, 117, 97, 114, 121, 32, 50, 48, 49, 53, 44, 32, 49, 49, 58, 49, 48, 44, 32, 34, 110, 111,
                    114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 34, 32, 60, 110, 111,
                    114, 109, 97, 110, 64, 97, 116, 97, 115, 104, 98, 97, 114, 46, 99, 111, 109, 62, 13, 10, 119, 114,
                    111, 116, 101, 58, 13, 10, 32, 32, 32, 13, 10, 13, 10, 32, 84, 69, 83, 84, 13, 10, 13, 10, 45, 45,
                    13, 10, 82, 101, 99, 101, 105, 118, 101, 100, 58, 32, 84, 117, 101, 32, 74, 97, 110, 32, 48, 54, 32,
                    48, 48, 58, 49, 48, 58, 52, 53, 32, 71, 77, 84, 32, 50, 48, 49, 53, 13, 10, 13, 10})
    );

    private static final String REPLY_HEADER_1_STARTING_REGEX = "\\s*-----Original Message-----.*";
    private static final Pattern REPLY_HEADER_1_STARTING_PATTERN = Pattern.compile(REPLY_HEADER_1_STARTING_REGEX,
            Pattern.CASE_INSENSITIVE);
    private static final String REPLY_HEADER_2_STARTING_REGEX = "\\s*On.*";
    private static final Pattern REPLY_HEADER_2_STARTING_PATTERN = Pattern.compile(REPLY_HEADER_2_STARTING_REGEX,
            Pattern.CASE_INSENSITIVE);
    private static final String REPLY_HEADER_2_REGEX_FORMAT = REPLY_HEADER_2_STARTING_PATTERN.pattern()
            + ".*<%s>.*wrote:\\s*";
    private static final String REPLY_HEADER_3_STARTING_REGEX =
            "^\\s*20[0-9][0-9]-[0-1]?[0-9]-[0-3]?[0-9] [0-2]?[0-9]:[0-5]?[0-9]";
    private static final Pattern REPLY_HEADER_3_STARTING_PATTERN = Pattern.compile(REPLY_HEADER_3_STARTING_REGEX,
            Pattern.CASE_INSENSITIVE);
    private static final String REPLY_HEADER_3_REGEX_FORMAT = REPLY_HEADER_3_STARTING_REGEX + ".*<%s>.*:\\s*";

    // FIXME: Use the code in application

    private String extractText(String text, String originalSenderEmail)
    {
        StringBuilder justReply = new StringBuilder();
        String lineSeparator = System.getProperty("line.separator");
        String[] lines = text.split(System.getProperty("line.separator"));
        for (int i = 0; i < lines.length; i++)
        {
            String line = lines[i].replaceAll("[\\r\\n]", " ");
            String extendedLine = line;
            if (i > 0)
                extendedLine = lines[i - 1].replaceAll("[\\r\\n]", " ") + " " + line;
            if (linesMatchReplyHeader(line, extendedLine, originalSenderEmail))
                break;
            justReply.append(lines[i]).append(lineSeparator);
        }
        String strippedText = justReply.toString();
        while (strippedText.endsWith("\n"))
        {
            strippedText = strippedText.substring(0, strippedText.length() - "\n".length());
            if (strippedText.endsWith("\r"))
                strippedText = strippedText.substring(0, strippedText.length() - "\r".length());
        }
        return strippedText;
    }

    private boolean linesMatchReplyHeader(String line, String extendedLine, String originalSenderEmail)
    {
        if (REPLY_HEADER_1_STARTING_PATTERN.matcher(line).find()
                || REPLY_HEADER_1_STARTING_PATTERN.matcher(extendedLine).find())
            return true;
        if (REPLY_HEADER_2_STARTING_PATTERN.matcher(line).find()
                || REPLY_HEADER_2_STARTING_PATTERN.matcher(extendedLine).find())
        {
            Pattern replyHeader2 = Pattern.compile(String.format(REPLY_HEADER_2_REGEX_FORMAT, originalSenderEmail),
                    Pattern.CASE_INSENSITIVE);
            if (replyHeader2.matcher(line).find() || replyHeader2.matcher(extendedLine).find())
                return true;
        }
        if (REPLY_HEADER_3_STARTING_PATTERN.matcher(line).find()
                || REPLY_HEADER_3_STARTING_PATTERN.matcher(extendedLine).find())
        {
            Pattern replyHeader3 = Pattern.compile(String.format(REPLY_HEADER_3_REGEX_FORMAT, originalSenderEmail),
                    Pattern.CASE_INSENSITIVE);
            if (replyHeader3.matcher(line).find() || replyHeader3.matcher(extendedLine).find())
                return true;
        }
        return false;
    }

    private String readInputStreamAsString(InputStream in, String charSet, String contentTransferEncoding)
            throws IOException
    {
        BufferedInputStream bis = new BufferedInputStream(in);
        ByteArrayOutputStream buf = new ByteArrayOutputStream();
        int result = bis.read();
        while (result != -1)
        {
            byte b = (byte) result;
            buf.write(b);
            result = bis.read();
        }
        return buf.toString(charSet);
    }

    private String parseMimeString(String mimeString, String emailAddress)
    {
        try
        {
            InputStream mimeStream = new ByteArrayInputStream(mimeString.getBytes());
            MessageBuilder builder = new DefaultMessageBuilder();
            Message message = builder.parseMessage(mimeStream);
            if (message.getBody() instanceof TextBody)
            {
                return parseTextBody((TextBody) message.getBody(), message.getContentTransferEncoding(), emailAddress);
            }
            else if (message.getBody() instanceof MultipartImpl)
            {
                MultipartImpl multipart = (MultipartImpl) message.getBody();
                boolean alternativeFound = multipart.getSubType().equals("alternative");
                while (!alternativeFound && multipart != null)
                {
                    List<Entity> mparts = multipart.getBodyParts();
                    MultipartImpl multipartRelated = null;
                    for (Entity mpart : mparts)
                    {
                        BodyPart mbodyPart = (BodyPart) mpart;
                        if (mbodyPart.getMimeType().equalsIgnoreCase("multipart/alternative"))
                        {
                            multipart = (MultipartImpl) mbodyPart.getBody();
                            alternativeFound = true;
                            break;
                        }
                        else if (mbodyPart.getMimeType().equalsIgnoreCase("multipart/related"))
                            multipartRelated = (MultipartImpl) mbodyPart.getBody();
                    }
                    if (alternativeFound)
                        break;
                    multipart = multipartRelated;
                }
                if (alternativeFound)
                {
                    boolean textFound = false;
                    List<Entity> parts = multipart.getBodyParts();
                    for (Entity part : parts)
                    {
                        BodyPart bodyPart = (BodyPart) part;
                        if (!bodyPart.getMimeType().equalsIgnoreCase("text/plain"))
                            continue;
                        textFound = true;
                        return parseTextBody((TextBody) bodyPart.getBody(), bodyPart.getContentTransferEncoding(),
                                emailAddress);
                    }
                    if (!textFound)
                    {
                        System.out.println("Message not supported, I couldn't find a text/plain section: " + mimeString);
                        System.out.println("MIME string buffer: " + mimeString);
                    }
                }
                else
                {
                    System.out.println("Message not supported, I couldn't find a multipart/alternative section: " + mimeString);
                    System.out.println("MIME string buffer: " + mimeString);
                }
            }
            return null;
        }
        catch (IOException e)
        {
            System.out.println("IO exception caught while checking for new emails.");
            System.out.println("MIME string buffer: " + mimeString);
            return null;
        }
        catch (MimeException e)
        {
            System.out.println("Mime exception caught while checking for new emails: " + mimeString);
            System.out.println("MIME string buffer: " + mimeString);
            return null;
        }
        catch (RuntimeException e)
        {
            System.out.println("Runtime exception caught from the the underlying library.");
            System.out.println("MIME string buffer: " + mimeString);
            return null;
        }
    }

    private String parseTextBody(TextBody textBody, String contentTransferEncoding, String originalSenderEmail)
            throws IOException
    {
        String parsedText = extractText(
                readInputStreamAsString(textBody.getInputStream(), textBody.getMimeCharset(), contentTransferEncoding),
                originalSenderEmail);
        System.out.println("Parsed text: " + parsedText);
        return parsedText;
    }

    @Test
    public void testParseMime()
    {
        // FIXME: Implement this test
        String parseResult = parseMimeString(singlePartMimeString, "a@b.com");
        String expectedParseResult = "MTgxOSBNRUFET1dWSUVXIERS";
        assertTrue(parseResult.contains(expectedParseResult));
    }
}
